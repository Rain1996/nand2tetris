// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    And(a=instruction[15], b=instruction[0], out=instructiontmp0);
	And(a=instruction[15], b=instruction[1], out=instructiontmp1);
	And(a=instruction[15], b=instruction[2], out=instructiontmp2);

	And(a=instruction[15], b=instruction[4], out=instructiontmp4);

	And(a=instruction[15], b=instruction[6], out=instructiontmp6);
	And(a=instruction[15], b=instruction[7], out=instructiontmp7);
	And(a=instruction[15], b=instruction[8], out=instructiontmp8);
	And(a=instruction[15], b=instruction[9], out=instructiontmp9);
	And(a=instruction[15], b=instruction[10], out=instructiontmp10);
	And(a=instruction[15], b=instruction[11], out=instructiontmp11);
	And(a=instruction[15], b=instruction[12], out=instructiontmp12);


    Mux16(a=instruction, b=aluout, sel=instruction[15], out=ain);
    Not(in=instruction[15], out=noti15);
    Or(a=noti15, b=instruction[5], out=aload);
    ARegister(in=ain, load=aload, out=aout);

    Mux16(a=aout, b=inM, sel=instructiontmp12, out=aormout);
    DRegister(in=aluout, load=instructiontmp4, out=dout);

    ALU(x=dout, y=aormout, zx=instructiontmp11, nx=instructiontmp10,
        zy=instructiontmp9, ny=instructiontmp8, f=instructiontmp7,
        no=instructiontmp6, out=aluout, zr=aluzr, ng=alung);

    And(a=instructiontmp1, b=aluzr, out=out0);
    And(a=instructiontmp2, b=alung, out=out1);
    Or(a=aluzr, b=alung, out=notp);
    Not(in=notp, out=p);    // positive
    And(a=instructiontmp0, b=p, out=out2);
    Or(a=out0, b=out1, out=out3);
    Or(a=out2, b=out3, out=pcload);
    DMux(in=true, sel=pcload, a=dmuxa, b=dmuxb);
    PC(in=aout, load=dmuxb, inc=dmuxa, reset=reset, out[0..14]=pc);

    Or16(a=aluout, b[0..15]=false, out=outM);
    And(a=instruction[3], b=instruction[15], out=writeM);
    Or16(a=aout, b[0..15]=false, out[0..14]=addressM);
}